// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TodoerClient is the client API for Todoer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoerClient interface {
	// TodoList
	CreateTodoList(ctx context.Context, in *CreateTodoListRequest, opts ...grpc.CallOption) (*CreateTodoListReply, error)
	GetAllTodoLists(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllTodoListsReply, error)
	GetTodoList(ctx context.Context, in *GetTodoListRequest, opts ...grpc.CallOption) (*GetTodoListReply, error)
	UpdateTodoList(ctx context.Context, in *UpdateTodoListRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteTodoList(ctx context.Context, in *DeleteTodoListRequest, opts ...grpc.CallOption) (*Empty, error)
	// Todo
	CreateTodo(ctx context.Context, in *CreateTodoRequest, opts ...grpc.CallOption) (*CreateTodoReply, error)
	GetTodosByList(ctx context.Context, in *GetTodosByListRequest, opts ...grpc.CallOption) (*GetTodosByListReply, error)
	GetTodo(ctx context.Context, in *GetTodoRequest, opts ...grpc.CallOption) (*GetTodoReply, error)
	UpdateTodo(ctx context.Context, in *UpdateTodoRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteTodo(ctx context.Context, in *DeleteTodoRequest, opts ...grpc.CallOption) (*Empty, error)
}

type todoerClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoerClient(cc grpc.ClientConnInterface) TodoerClient {
	return &todoerClient{cc}
}

func (c *todoerClient) CreateTodoList(ctx context.Context, in *CreateTodoListRequest, opts ...grpc.CallOption) (*CreateTodoListReply, error) {
	out := new(CreateTodoListReply)
	err := c.cc.Invoke(ctx, "/todoer.Todoer/CreateTodoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoerClient) GetAllTodoLists(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllTodoListsReply, error) {
	out := new(GetAllTodoListsReply)
	err := c.cc.Invoke(ctx, "/todoer.Todoer/GetAllTodoLists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoerClient) GetTodoList(ctx context.Context, in *GetTodoListRequest, opts ...grpc.CallOption) (*GetTodoListReply, error) {
	out := new(GetTodoListReply)
	err := c.cc.Invoke(ctx, "/todoer.Todoer/GetTodoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoerClient) UpdateTodoList(ctx context.Context, in *UpdateTodoListRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/todoer.Todoer/UpdateTodoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoerClient) DeleteTodoList(ctx context.Context, in *DeleteTodoListRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/todoer.Todoer/DeleteTodoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoerClient) CreateTodo(ctx context.Context, in *CreateTodoRequest, opts ...grpc.CallOption) (*CreateTodoReply, error) {
	out := new(CreateTodoReply)
	err := c.cc.Invoke(ctx, "/todoer.Todoer/CreateTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoerClient) GetTodosByList(ctx context.Context, in *GetTodosByListRequest, opts ...grpc.CallOption) (*GetTodosByListReply, error) {
	out := new(GetTodosByListReply)
	err := c.cc.Invoke(ctx, "/todoer.Todoer/GetTodosByList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoerClient) GetTodo(ctx context.Context, in *GetTodoRequest, opts ...grpc.CallOption) (*GetTodoReply, error) {
	out := new(GetTodoReply)
	err := c.cc.Invoke(ctx, "/todoer.Todoer/GetTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoerClient) UpdateTodo(ctx context.Context, in *UpdateTodoRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/todoer.Todoer/UpdateTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoerClient) DeleteTodo(ctx context.Context, in *DeleteTodoRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/todoer.Todoer/DeleteTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoerServer is the server API for Todoer service.
// All implementations must embed UnimplementedTodoerServer
// for forward compatibility
type TodoerServer interface {
	// TodoList
	CreateTodoList(context.Context, *CreateTodoListRequest) (*CreateTodoListReply, error)
	GetAllTodoLists(context.Context, *Empty) (*GetAllTodoListsReply, error)
	GetTodoList(context.Context, *GetTodoListRequest) (*GetTodoListReply, error)
	UpdateTodoList(context.Context, *UpdateTodoListRequest) (*Empty, error)
	DeleteTodoList(context.Context, *DeleteTodoListRequest) (*Empty, error)
	// Todo
	CreateTodo(context.Context, *CreateTodoRequest) (*CreateTodoReply, error)
	GetTodosByList(context.Context, *GetTodosByListRequest) (*GetTodosByListReply, error)
	GetTodo(context.Context, *GetTodoRequest) (*GetTodoReply, error)
	UpdateTodo(context.Context, *UpdateTodoRequest) (*Empty, error)
	DeleteTodo(context.Context, *DeleteTodoRequest) (*Empty, error)
	mustEmbedUnimplementedTodoerServer()
}

// UnimplementedTodoerServer must be embedded to have forward compatible implementations.
type UnimplementedTodoerServer struct {
}

func (UnimplementedTodoerServer) CreateTodoList(context.Context, *CreateTodoListRequest) (*CreateTodoListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTodoList not implemented")
}
func (UnimplementedTodoerServer) GetAllTodoLists(context.Context, *Empty) (*GetAllTodoListsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTodoLists not implemented")
}
func (UnimplementedTodoerServer) GetTodoList(context.Context, *GetTodoListRequest) (*GetTodoListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodoList not implemented")
}
func (UnimplementedTodoerServer) UpdateTodoList(context.Context, *UpdateTodoListRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTodoList not implemented")
}
func (UnimplementedTodoerServer) DeleteTodoList(context.Context, *DeleteTodoListRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTodoList not implemented")
}
func (UnimplementedTodoerServer) CreateTodo(context.Context, *CreateTodoRequest) (*CreateTodoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTodo not implemented")
}
func (UnimplementedTodoerServer) GetTodosByList(context.Context, *GetTodosByListRequest) (*GetTodosByListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodosByList not implemented")
}
func (UnimplementedTodoerServer) GetTodo(context.Context, *GetTodoRequest) (*GetTodoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodo not implemented")
}
func (UnimplementedTodoerServer) UpdateTodo(context.Context, *UpdateTodoRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTodo not implemented")
}
func (UnimplementedTodoerServer) DeleteTodo(context.Context, *DeleteTodoRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTodo not implemented")
}
func (UnimplementedTodoerServer) mustEmbedUnimplementedTodoerServer() {}

// UnsafeTodoerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoerServer will
// result in compilation errors.
type UnsafeTodoerServer interface {
	mustEmbedUnimplementedTodoerServer()
}

func RegisterTodoerServer(s grpc.ServiceRegistrar, srv TodoerServer) {
	s.RegisterService(&Todoer_ServiceDesc, srv)
}

func _Todoer_CreateTodoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTodoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoerServer).CreateTodoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todoer.Todoer/CreateTodoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoerServer).CreateTodoList(ctx, req.(*CreateTodoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todoer_GetAllTodoLists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoerServer).GetAllTodoLists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todoer.Todoer/GetAllTodoLists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoerServer).GetAllTodoLists(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todoer_GetTodoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTodoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoerServer).GetTodoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todoer.Todoer/GetTodoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoerServer).GetTodoList(ctx, req.(*GetTodoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todoer_UpdateTodoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTodoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoerServer).UpdateTodoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todoer.Todoer/UpdateTodoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoerServer).UpdateTodoList(ctx, req.(*UpdateTodoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todoer_DeleteTodoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTodoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoerServer).DeleteTodoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todoer.Todoer/DeleteTodoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoerServer).DeleteTodoList(ctx, req.(*DeleteTodoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todoer_CreateTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoerServer).CreateTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todoer.Todoer/CreateTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoerServer).CreateTodo(ctx, req.(*CreateTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todoer_GetTodosByList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTodosByListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoerServer).GetTodosByList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todoer.Todoer/GetTodosByList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoerServer).GetTodosByList(ctx, req.(*GetTodosByListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todoer_GetTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoerServer).GetTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todoer.Todoer/GetTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoerServer).GetTodo(ctx, req.(*GetTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todoer_UpdateTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoerServer).UpdateTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todoer.Todoer/UpdateTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoerServer).UpdateTodo(ctx, req.(*UpdateTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Todoer_DeleteTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoerServer).DeleteTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todoer.Todoer/DeleteTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoerServer).DeleteTodo(ctx, req.(*DeleteTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Todoer_ServiceDesc is the grpc.ServiceDesc for Todoer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Todoer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "todoer.Todoer",
	HandlerType: (*TodoerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTodoList",
			Handler:    _Todoer_CreateTodoList_Handler,
		},
		{
			MethodName: "GetAllTodoLists",
			Handler:    _Todoer_GetAllTodoLists_Handler,
		},
		{
			MethodName: "GetTodoList",
			Handler:    _Todoer_GetTodoList_Handler,
		},
		{
			MethodName: "UpdateTodoList",
			Handler:    _Todoer_UpdateTodoList_Handler,
		},
		{
			MethodName: "DeleteTodoList",
			Handler:    _Todoer_DeleteTodoList_Handler,
		},
		{
			MethodName: "CreateTodo",
			Handler:    _Todoer_CreateTodo_Handler,
		},
		{
			MethodName: "GetTodosByList",
			Handler:    _Todoer_GetTodosByList_Handler,
		},
		{
			MethodName: "GetTodo",
			Handler:    _Todoer_GetTodo_Handler,
		},
		{
			MethodName: "UpdateTodo",
			Handler:    _Todoer_UpdateTodo_Handler,
		},
		{
			MethodName: "DeleteTodo",
			Handler:    _Todoer_DeleteTodo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/todoer.proto",
}
